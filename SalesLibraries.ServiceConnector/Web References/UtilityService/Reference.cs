//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SalesLibraries.ServiceConnector.UtilityService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UtilityControllerBinding", Namespace="urn:UtilityControllerwsdl")]
    public partial class UtilityControllerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback updateWallbinOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateShortcutsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateQuizzesOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetOpCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSessionKeyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UtilityControllerService() {
            this.Url = global::SalesLibraries.ServiceConnector.Properties.Settings.Default.SalesLibraries_ServiceConnector_UtilityService_UtilityControllerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event updateWallbinCompletedEventHandler updateWallbinCompleted;
        
        /// <remarks/>
        public event updateShortcutsCompletedEventHandler updateShortcutsCompleted;
        
        /// <remarks/>
        public event updateQuizzesCompletedEventHandler updateQuizzesCompleted;
        
        /// <remarks/>
        public event resetOpCacheCompletedEventHandler resetOpCacheCompleted;
        
        /// <remarks/>
        public event getSessionKeyCompletedEventHandler getSessionKeyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:UtilityControllerwsdl#updateWallbin", RequestNamespace="urn:UtilityControllerwsdl", ResponseNamespace="urn:UtilityControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string updateWallbin(string sessionKey) {
            object[] results = this.Invoke("updateWallbin", new object[] {
                        sessionKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateWallbinAsync(string sessionKey) {
            this.updateWallbinAsync(sessionKey, null);
        }
        
        /// <remarks/>
        public void updateWallbinAsync(string sessionKey, object userState) {
            if ((this.updateWallbinOperationCompleted == null)) {
                this.updateWallbinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateWallbinOperationCompleted);
            }
            this.InvokeAsync("updateWallbin", new object[] {
                        sessionKey}, this.updateWallbinOperationCompleted, userState);
        }
        
        private void OnupdateWallbinOperationCompleted(object arg) {
            if ((this.updateWallbinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateWallbinCompleted(this, new updateWallbinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:UtilityControllerwsdl#updateShortcuts", RequestNamespace="urn:UtilityControllerwsdl", ResponseNamespace="urn:UtilityControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string updateShortcuts(string sessionKey) {
            object[] results = this.Invoke("updateShortcuts", new object[] {
                        sessionKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateShortcutsAsync(string sessionKey) {
            this.updateShortcutsAsync(sessionKey, null);
        }
        
        /// <remarks/>
        public void updateShortcutsAsync(string sessionKey, object userState) {
            if ((this.updateShortcutsOperationCompleted == null)) {
                this.updateShortcutsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateShortcutsOperationCompleted);
            }
            this.InvokeAsync("updateShortcuts", new object[] {
                        sessionKey}, this.updateShortcutsOperationCompleted, userState);
        }
        
        private void OnupdateShortcutsOperationCompleted(object arg) {
            if ((this.updateShortcutsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateShortcutsCompleted(this, new updateShortcutsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:UtilityControllerwsdl#updateQuizzes", RequestNamespace="urn:UtilityControllerwsdl", ResponseNamespace="urn:UtilityControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string updateQuizzes(string sessionKey) {
            object[] results = this.Invoke("updateQuizzes", new object[] {
                        sessionKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateQuizzesAsync(string sessionKey) {
            this.updateQuizzesAsync(sessionKey, null);
        }
        
        /// <remarks/>
        public void updateQuizzesAsync(string sessionKey, object userState) {
            if ((this.updateQuizzesOperationCompleted == null)) {
                this.updateQuizzesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateQuizzesOperationCompleted);
            }
            this.InvokeAsync("updateQuizzes", new object[] {
                        sessionKey}, this.updateQuizzesOperationCompleted, userState);
        }
        
        private void OnupdateQuizzesOperationCompleted(object arg) {
            if ((this.updateQuizzesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateQuizzesCompleted(this, new updateQuizzesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:UtilityControllerwsdl#resetOpCache", RequestNamespace="urn:UtilityControllerwsdl", ResponseNamespace="urn:UtilityControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string resetOpCache(string sessionKey) {
            object[] results = this.Invoke("resetOpCache", new object[] {
                        sessionKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void resetOpCacheAsync(string sessionKey) {
            this.resetOpCacheAsync(sessionKey, null);
        }
        
        /// <remarks/>
        public void resetOpCacheAsync(string sessionKey, object userState) {
            if ((this.resetOpCacheOperationCompleted == null)) {
                this.resetOpCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetOpCacheOperationCompleted);
            }
            this.InvokeAsync("resetOpCache", new object[] {
                        sessionKey}, this.resetOpCacheOperationCompleted, userState);
        }
        
        private void OnresetOpCacheOperationCompleted(object arg) {
            if ((this.resetOpCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetOpCacheCompleted(this, new resetOpCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:UtilityControllerwsdl#getSessionKey", RequestNamespace="urn:UtilityControllerwsdl", ResponseNamespace="urn:UtilityControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string getSessionKey(string login, string password) {
            object[] results = this.Invoke("getSessionKey", new object[] {
                        login,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSessionKeyAsync(string login, string password) {
            this.getSessionKeyAsync(login, password, null);
        }
        
        /// <remarks/>
        public void getSessionKeyAsync(string login, string password, object userState) {
            if ((this.getSessionKeyOperationCompleted == null)) {
                this.getSessionKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSessionKeyOperationCompleted);
            }
            this.InvokeAsync("getSessionKey", new object[] {
                        login,
                        password}, this.getSessionKeyOperationCompleted, userState);
        }
        
        private void OngetSessionKeyOperationCompleted(object arg) {
            if ((this.getSessionKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSessionKeyCompleted(this, new getSessionKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void updateWallbinCompletedEventHandler(object sender, updateWallbinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateWallbinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateWallbinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void updateShortcutsCompletedEventHandler(object sender, updateShortcutsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateShortcutsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateShortcutsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void updateQuizzesCompletedEventHandler(object sender, updateQuizzesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateQuizzesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateQuizzesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void resetOpCacheCompletedEventHandler(object sender, resetOpCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetOpCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetOpCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getSessionKeyCompletedEventHandler(object sender, getSessionKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSessionKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSessionKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591